{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","regexPermissionNumber","regexPermissionString","modStrings","getKeyByValue","object","value","Object","keys","find","key","CheckBox","props","state","checked","permissionValue","handleChange","bind","e","target","this","setState","onCheckboxChange","permissionName","type","name","onChange","permission","React","Component","Permission","permissionNumber","permissionGroupName","handleCheckboxChange","permissionVal","parseInt","onModChange","readPermission","permissionString","writePermission","executePermission","className","LinuxPermission","ownerPermission","groupPermission","publicPermission","handleModChange","onUpdatePermissionNumber","ownerPermissionString","length","substring","groupPermissionString","publicPermissionString","ChmodCaculator","permissionNumberClassInput","permissionStringClassInput","linuxPermissionString","handleUpdatePermissionNumber","handlePermissionNumberChange","handlePermissionNumberEntered","handlePermissionStringChange","handlePermissionStringEntered","handleInputStringBlur","handleInputNumberBlur","mods","forEach","permissionvVal","i","placeholder","onKeyPress","onBlur","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57bafca6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst regexPermissionNumber = /^[0-7]{3}$/g;\nconst regexPermissionString = /^([r-][w-][x-]){3}$/g;\nconst modStrings = {\n  '---': 0,\n  '--x': 1,\n  '-w-': 2,\n  '-wx': 3,\n  'r--': 4,\n  'r-x': 5,\n  'rw-': 6,\n  'rwx': 7\n}\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\n\nclass CheckBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false, permissionValue: this.props.permissionValue };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    let permissionValue = e.target.value;\n\n    this.setState({ checked: !this.state.checked },\n      () => { this.props.onCheckboxChange(permissionValue, this.state.checked)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <label><strong>{ this.props.permissionName }</strong></label>\n        <input type=\"checkbox\" name=\"permission\" value={ this.props.permissionValue } onChange={ this.handleChange } checked={this.props.permission}/>\n      </div>\n    )\n  }\n}\n\nclass Permission extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      permissionNumber: 0,\n      permissionGroupName: props.permissionGroupName,\n    };\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n  }\n\n  async handleCheckboxChange(permissionValue, checked) {\n    let permissionNumber = this.state.permissionNumber;\n    let permissionVal = parseInt(permissionValue);\n\n    if(checked) {\n      permissionNumber += permissionVal;\n    } else {\n      permissionNumber -= permissionVal;\n    }\n\n    await this.setState({ permissionNumber: permissionNumber });\n    await this.props.onModChange(this.state.permissionNumber, this.state.permissionGroupName);\n  }\n\n  render() {\n    let readPermission = this.props.permissionString[0] === 'r' ? true : false;\n    let writePermission = this.props.permissionString[1] === 'w' ? true : false;\n    let executePermission = this.props.permissionString[2] === 'x' ? true : false;\n\n    return (\n      <div className=\"col-md-4\">\n        <h1>{ this.props.permissionGroupName }</h1>\n        <br/>\n        <CheckBox permissionName=\"Read\" permissionValue=\"4\" onCheckboxChange={ this.handleCheckboxChange } permission= { readPermission }></CheckBox>\n        <br/>\n        <CheckBox permissionName=\"Write\" permissionValue=\"2\" onCheckboxChange={ this.handleCheckboxChange } permission= { writePermission }></CheckBox>\n        <br/>\n        <CheckBox permissionName=\"Execute\" permissionValue=\"1\" onCheckboxChange={ this.handleCheckboxChange } permission= { executePermission }></CheckBox>\n      </div>\n    )\n  }\n}\n\nclass LinuxPermission extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ownerPermission: 0,\n      groupPermission: 0,\n      publicPermission: 0,\n    }\n    this.handleModChange = this.handleModChange.bind(this);\n  }\n\n  async handleModChange(permissionNumber, permissionGroupName) {\n    switch(permissionGroupName) {\n      case 'Owner':\n        await this.setState({ ownerPermission: permissionNumber });\n        break;\n      case 'Group':\n        await this.setState({ groupPermission: permissionNumber });\n        break;\n      case 'Public':\n        await this.setState({ publicPermission: permissionNumber });\n        break;\n      default:\n        break;\n    }\n\n    await this.props.onUpdatePermissionNumber(this.state);\n  }\n\n  render() {\n    let ownerPermissionString = this.props.permissionString.length === 9 ? this.props.permissionString.substring(0, 3) : '';\n    let groupPermissionString = this.props.permissionString.length === 9 ? this.props.permissionString.substring(3, 6) : '';\n    let publicPermissionString = this.props.permissionString.length === 9 ? this.props.permissionString.substring(6, 9) : '';\n\n    return (\n      <div className=\"row\">\n        <Permission permissionGroupName=\"Owner\" onModChange={ this.handleModChange } permissionString={ ownerPermissionString }></Permission>\n        <Permission permissionGroupName=\"Group\" onModChange={ this.handleModChange } permissionString={ groupPermissionString }></Permission>\n        <Permission permissionGroupName=\"Public\" onModChange={ this.handleModChange } permissionString={ publicPermissionString }></Permission>\n      </div>\n    )\n  }\n}\n\nclass ChmodCaculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      permissionNumber: '',\n      permissionString: '',\n      permissionNumberClassInput: '',\n      permissionStringClassInput: '',\n      linuxPermissionString: ''\n    };\n    this.handleUpdatePermissionNumber = this.handleUpdatePermissionNumber.bind(this);\n    this.handlePermissionNumberChange = this.handlePermissionNumberChange.bind(this);\n    this.handlePermissionNumberEntered = this.handlePermissionNumberEntered.bind(this);\n    this.handlePermissionStringChange = this.handlePermissionStringChange.bind(this);\n    this.handlePermissionStringEntered = this.handlePermissionStringEntered.bind(this);\n    this.handleInputStringBlur = this.handleInputStringBlur.bind(this);\n    this.handleInputNumberBlur = this.handleInputNumberBlur.bind(this);\n  }\n\n  handleUpdatePermissionNumber(mods) {\n    let permissionNumber = '';\n    let permissionString = '';\n\n    Object.keys(mods).forEach((key) => {\n      permissionNumber += mods[key];\n      permissionString += getKeyByValue(modStrings, parseInt(mods[key]));\n    })\n\n    this.setState({ permissionNumber: permissionNumber, permissionString: permissionString });\n  }\n\n  handlePermissionNumberChange(e) {\n    this.setState({ permissionNumber: e.target.value });\n  }\n\n  handlePermissionStringChange(e) {\n    this.setState({ permissionString: e.target.value });\n  }\n\n  handlePermissionNumberEntered(e) {\n    if(e.key === 'Enter') {\n      if(e.target.value.match(regexPermissionNumber)) {\n        let permissionNumber = e.target.value;\n        let linuxPermissionString = '';\n\n        [...permissionNumber].forEach(permissionvVal => linuxPermissionString += getKeyByValue(modStrings, parseInt(permissionvVal)));\n\n        this.setState({\n          linuxPermissionString: linuxPermissionString,\n          permissionString: '',\n          permissionNumberClassInput: 'is-valid',\n        });\n      } else {\n        this.setState({ permissionNumberClassInput: 'is-invalid' });\n      }\n    }\n  }\n\n  handlePermissionStringEntered(e) {\n    if(e.key === 'Enter') {\n      let permissionString = e.target.value;\n      let permissionNumber = '';\n\n      for(let i=0; i<3; i++) {\n        permissionNumber+= modStrings[permissionString.substring(i*3, (i+1)*3)];\n      }\n\n      if(permissionString.match(regexPermissionString)) {\n        this.setState({\n          permissionNumber: permissionNumber,\n          linuxPermissionString: permissionString,\n          permissionStringClassInput: 'is-valid',\n        });\n      } else {\n        this.setState({ permissionStringClassInput: 'is-invalid' });\n      }\n    }\n  }\n\n  handleInputStringBlur() {\n    this.setState({ permissionStringClassInput: '' });\n  }\n\n  handleInputNumberBlur() {\n    this.setState({ permissionNumberClassInput: '' });\n  }\n\n  render() {\n    return(\n      <div>\n        <LinuxPermission onUpdatePermissionNumber={ this.handleUpdatePermissionNumber } permissionString={ this.state.linuxPermissionString }></LinuxPermission>\n        <br/>\n        <div className=\"row\">\n          <h1 className=\"col-md-4\">Linux Permissions</h1>\n          <div className=\"col-md-4\">\n            <div>\n              <input className={`form-control ${this.state.permissionNumberClassInput}`} type=\"text\" name=\"permissions_number\" placeholder=\"000\" value={ this.state.permissionNumber } onChange={ this.handlePermissionNumberChange } onKeyPress={ this.handlePermissionNumberEntered } onBlur={ this.handleInputNumberBlur }/>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div>\n              <input className={`form-control ${this.state.permissionStringClassInput}`} type=\"text\" name=\"permissions_string\" placeholder=\"rwxrwxrwx\" value={ this.state.permissionString } onChange={ this.handlePermissionStringChange } onKeyPress={ this.handlePermissionStringEntered }  onBlur={ this.handleInputStringBlur }/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <ChmodCaculator></ChmodCaculator>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}